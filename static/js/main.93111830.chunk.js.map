{"version":3,"sources":["components/AddTodo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","props","useState","todo","description","setDescription","updateMode","setUpdateMode","styles","input","padding","button","width","className","type","onChange","e","target","value","placeholder","onClick","canceled","style","updatedTodo","id","todoUpdated","newTodo","uuid","todoAdded","TodoList","todos","setTodos","selectedTodoId","setSelectedTodoId","useEffect","deleteHandler","filteredTodos","filter","openEditMode","updateTodoHandler","index","findIndex","cancelHandler","listItem","todoListItems","map","shouldUpdate","key","bind","App","setNewTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93111830.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport \"./AddTodo.css\";\r\nconst AddTodo = props => {\r\n  const [description, setDescription] = useState(\r\n    props.todo ? props.todo.description : \"\"\r\n  );\r\n\r\n  const [updateMode, setUpdateMode] = useState(!!props.todo);\r\n\r\n  const addTodoHandler = () => {\r\n    const newTodo = {\r\n      id: uuid(),\r\n      description\r\n    };\r\n    props.todoAdded(newTodo);\r\n    setDescription(\"\");\r\n  };\r\n\r\n  const updateTodoHandler = () => {\r\n    const updatedTodo = {\r\n      id: props.todo.id,\r\n      description\r\n    };\r\n    props.todoUpdated(updatedTodo);\r\n    setDescription(\"\");\r\n  };\r\n\r\n  const cancelHandler = () => {\r\n    setUpdateMode(false);\r\n    props.canceled();\r\n  };\r\n\r\n  const nameChangedHandler = e => {\r\n    setDescription(e.target.value);\r\n  };\r\n\r\n  const styles = {\r\n    input: {\r\n      padding: 0\r\n    },\r\n    button: {\r\n      padding: 10,\r\n      width: \"auto\"\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"AddTodo\">\r\n      <input\r\n        type=\"text\"\r\n        onChange={nameChangedHandler}\r\n        value={description}\r\n        placeholder=\"ex: Learn React Hooks and Redux\"\r\n      ></input>\r\n      {updateMode ? (\r\n        <>\r\n          <button\r\n            className=\"btn btn-red\"\r\n            onClick={cancelHandler}\r\n            style={styles.button}\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            className=\"btn btn-blue\"\r\n            onClick={updateTodoHandler}\r\n            style={styles.button}\r\n          >\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <button className=\"btn btn-blue\" onClick={addTodoHandler}>\r\n          Add\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTodo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport uuid from \"uuid\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport \"./TodoList.css\";\r\nconst TodoList = props => {\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      id: uuid(),\r\n      description: \"Learn React.js\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Learn React Hooks\"\r\n    },\r\n    {\r\n      id: uuid(),\r\n      description: \"Learn Redux\"\r\n    }\r\n  ]);\r\n\r\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (props.todo) setTodos([...todos, props.todo]);\r\n  }, [props.todo]);\r\n\r\n  const deleteHandler = id => {\r\n    const filteredTodos = todos.filter(todo => todo.id !== id);\r\n    setTodos(filteredTodos);\r\n  };\r\n\r\n  const openEditMode = id => {\r\n    setSelectedTodoId(id);\r\n  };\r\n\r\n  const updateTodoHandler = updatedTodo => {\r\n    const index = todos.findIndex(todo => todo.id === updatedTodo.id);\r\n    if (index > -1) {\r\n      todos[index] = updatedTodo;\r\n      setSelectedTodoId(null);\r\n    }\r\n  };\r\n\r\n  const cancelHandler = () => {\r\n    setSelectedTodoId(null);\r\n  };\r\n\r\n  const styles = {\r\n    listItem: {\r\n      padding: 0\r\n    }\r\n  };\r\n\r\n  const todoListItems = todos.map((todo, index) => {\r\n    const shouldUpdate = selectedTodoId === todo.id;\r\n    return (\r\n      <li key={todo.id} style={shouldUpdate ? styles.listItem : {}}>\r\n        {shouldUpdate ? (\r\n          <AddTodo\r\n            todo={todo}\r\n            todoUpdated={updateTodoHandler}\r\n            canceled={cancelHandler}\r\n          />\r\n        ) : (\r\n          todo.description\r\n        )}\r\n\r\n        {!shouldUpdate ? (\r\n          <>\r\n            <button\r\n              className=\"btn btn-red\"\r\n              onClick={deleteHandler.bind(this, todo.id)}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button\r\n              className=\"btn btn-blue\"\r\n              onClick={openEditMode.bind(this, todo.id)}\r\n            >\r\n              Edit\r\n            </button>\r\n          </>\r\n        ) : null}\r\n      </li>\r\n    );\r\n  });\r\n  return <ul className=\"TodoList\">{todoListItems}</ul>;\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nimport AddTodo from \"./components/AddTodo\";\n\nfunction App() {\n  const [newTodo, setNewTodo] = useState(null);\n  const addTodoHandler = todo => {\n    setNewTodo(todo);\n  };\n\n  return (\n    <div className=\"App\">\n      <AddTodo todoAdded={addTodoHandler} />\n      <TodoList todo={newTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}